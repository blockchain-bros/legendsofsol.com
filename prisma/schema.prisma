generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  name          String?
  twitterHandle String?      @unique
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  location      Json?
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  whitelisted   Whitelist[]  @relation("whitelistedBy")
  whitelistedBy Whitelist[]  @relation("whitelistedUser")
  nfts          NFT[]
  votes         Vote[]
  LegendScore   LegendScore?

  @@map(name: "users")
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  handle             String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Whitelist {
  status              String?
  tweetSent           Boolean? @default(false)
  whitelistedUser     User     @relation("whitelistedUser", fields: [whitelistedHandle], references: [twitterHandle])
  whitelistedHandle   String
  whitelistedBy       User     @relation("whitelistedBy", fields: [whitelistedByHandle], references: [twitterHandle])
  whitelistedByHandle String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt

  @@id([whitelistedHandle, whitelistedByHandle])
  @@map("whitelists")
}

model FetchString {
  id          Int    @id @default(autoincrement())
  fetchString String

  @@map("fetchstrings")
}

model NFT {
  id            Int         @id @default(autoincrement())
  nftAddress    String
  name          String
  description   String?
  symbol        String
  img           String
  cdnImg        String?
  mime          String?
  collectionKey String?
  metadata      Json?
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  collectionId  Int?
  Collection    Collection? @relation(fields: [collectionId], references: [id])
  votes         Vote[]

  @@map("nfts")
}

model Collection {
  id                  Int                   @id @default(autoincrement())
  collectionKey       String                @unique
  img                 String
  cdnImg              String
  mime                String
  description         String
  name                String
  symbol              String?
  url                 String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
  votes               Vote[]
  helloMoonCollection HelloMoonCollection[]
  nft                 NFT[]

  @@map("collections")
}

model HelloMoonCollection {
  id                    Int        @id @default(autoincrement())
  collectionName        String
  helloMoonCollectionId String     @unique
  floorPrice            BigInt?
  volume                BigInt?
  averageWashScore      Float?
  slug                  String?
  supply                Int?
  currentOwnerCount     Int?
  ownersAvgUsdcHoldings Int?
  avgPriceSol           Float?
  collection            Collection @relation(fields: [collectionId], references: [id])
  collectionId          Int

  @@map("hello_moon_collections")
}

model Vote {
  id           Int        @id @default(autoincrement())
  status       String
  weight       Int
  userId       Int
  collectionId Int
  user         User       @relation(fields: [userId], references: [id])
  collection   Collection @relation(fields: [collectionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  nft          NFT[]

  @@map("votes")
}

model LegendScore {
  id               Int      @id @default(autoincrement())
  twitterHandle    String   @unique
  whitelistedCount Int
  total            Float
  data             Json
  claimed          Boolean  @default(false)
  signature        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt

  user User? @relation(fields: [twitterHandle], references: [twitterHandle])

  @@map("legend_scores")
}

model PartnerScore {
  id        Int      @id @default(autoincrement())
  address   String   @unique
  total     Float
  claimed   Boolean  @default(false)
  signature String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("partner_scores")
}
